/*****************************************************************************
* Pusher event subscription functionality.
* Currently using ERB to access application config, to simplify demo.
* @see vendor/assets/javascripts/pusher.min.js
* @todo Implement `Global` for better access to application config
*       https://github.com/railsware/global
******************************************************************************/

/**
 * Creates a connection to the application's Pusher account, and subscribes to 
 *  the configured channel.
 * @param orderDisplayCallback function
 *  Callback to handle drawing recent order or shipment data on the page.
 */
var subscribeToOrders = function(orderDisplayCallback) {
  var pusher  = new Pusher('<%= Rails.configuration.x.pusher.appkey.to_s %>');
  var channel = pusher.subscribe('<%= Rails.configuration.x.pusher.channel.to_s %>');

  channel.bind('<%= Order::PUSHER_EVENT_ORDER_RECIEVED %>', function(data) {
    subscribeCallbackHelper(data, orderDisplayCallback, true);
  });

  channel.bind('<%= Order::PUSHER_EVENT_ORDER_SHIPPED %>', function(data) {
    subscribeCallbackHelper(data, orderDisplayCallback, false);
  });

  // may need to unsubscribe / disconnect on navigation away from page
}

/**
 * Parses the Pusher 'message' (data.order) as JSON
 * @param data Object
 *  Expects property data.order, as string containing Order data.
 */
var processPusherData = function(pusherData) {
  pusherData.order = JSON.parse(pusherData.order);
  return pusherData;
}

/**
 * Helper function for code reuse. Ensures the callback function used to 
 *  Update the DOM is a function, and calls a data processing callback to
 *  ensure Pusher data is all proper JSON.
 * @param data Object
 *  Data from the Pusher channel subscription.
 * @param orderDisplayCallback function
 *  Callback to handle drawing recent order or shipment data on the page.
 * @param is_order Boolean
 *  TRUE for data is a recent Order
 *  FALSE for data is a recent shipment
 */
var subscribeCallbackHelper = function(data, orderDisplayCallback, is_order) {
  if (typeof orderDisplayCallback === 'function') {
    data = processPusherData(data);
    orderDisplayCallback(data, is_order);
  }
}